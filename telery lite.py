import wikipediaapi
from pyrogram import Client, filters
import random
import asyncio
import requests
import os
from pyrogram.errors import FloodWait
from datetime import datetime, timedelta
import tgcrypto
import subprocess
import sys
import time
import io

# –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª "userbot.info", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
with open("userbot.info", "r") as file:
    lines = file.readlines()
    api_id = int(lines[0].strip())
    api_hash = lines[1].strip()
    userid_telegram = int(lines[2].strip())
    prefix_userbot = lines[3].strip()
    allowed_user_id = userid_telegram

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –ù–µ –º–µ–Ω—è–π—Ç–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—à–∏–±–æ–∫.
afk_mode = False
afk_reason = ""
afk_start_time = 0
last_command_time = {}
app = Client("telery_userbot", api_id=api_id, api_hash=api_hash)

# –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç –≤–∏–∫–∏–ø–µ–¥–∏–∏ —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è "wikipedia-api".
wiki_wiki = wikipediaapi.Wikipedia(
    language='ru',
    extract_format=wikipediaapi.ExtractFormat.WIKI,
    user_agent='TeleryUserBot/1.0'
)


# –ö–æ–º–∞–Ω–¥–∞ "help"
@app.on_message(filters.command("help", prefixes=prefix_userbot))
async def help_command(_, message):
    prefix = prefix_userbot
    await message.reply_text(
        "**–ö–æ–º–∞–Ω–¥—ã(–≤—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: 16):**\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —é–±:\n"
        f"‚Ñπ`{prefix}info` - –∏–Ω—Ñ–æ –æ —é–∑–µ—Ä–±–æ—Ç–µ\n"
        f"`{prefix}animtext` - –∞–Ω–∏–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç.\n"
        f"‚åõ`{prefix}ping` - –ü–∏—à–µ—Ç –ø–∏–Ω–≥ —é–±.\n"
        f"‚úâ`{prefix}spam` - –ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–ª—É–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤—ã–±—Ä–∞–ª–∏. –ü—Ä–∏–º–µ—Ä: `{prefix}spam 3 Telery - –∫—Ä—É—Ç–æ!`\n"
        f"üí§`{prefix}off` - –û—Ç–∫–ª—é—á–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç–∞.\n"
        f"`.prefix` - –ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å —é–∑–µ—Ä–±–æ—Ç–∞. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: `.`\n"
        f"üò¥`{prefix}afk` - –≤–∫–ª—é—á–∞–µ—Ç AFK-—Ä–µ–∂–∏–º.\n"
        f"ü•±`{prefix}afkoff` - –æ—Ç–∫–ª—é—á–∞–µ—Ç AFK-—Ä–µ–∂–∏–º.\n"
        "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:**\n"
        f"üîé`{prefix}search` - –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n"
        f"‚åõ`{prefix}time` - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —é–±.\n"
        f"`{prefix}oorr` - –û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞.\n"
        f"üê±`{prefix}randkomaru` / `rk` - –∫–∏–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –≥–∏—Ñ–∫—É —Å –ö–æ–º–∞—Ä—É\n"
        f"‚ùì`{prefix}who` - –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–∞, –∏ –ø–∏—à–µ—Ç –∫—Ç–æ –æ–Ω.\n"
        f"üé∞`{prefix}caz` - –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É –Ω–∞ —á—Ç–æ-—É–≥–æ–¥–Ω–æ. –ø—Ä–∏–º–µ—Ä: `{prefix}caz 2 –¥–æ–ª–ª–∞—Ä–∞`\n"
        f"üßÆ`{prefix}math` - —Ä–µ—à–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n"
        f"üîÑ`{prefix}swap` - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É —Ç–µ–∫—Å—Ç–∞.\n"
    )


# –ö–æ–º–∞–Ω–¥–∞ "info"
@app.on_message(filters.me & filters.command("info", prefixes=prefix_userbot))
async def info_command(_, message):
    start_time = time.time()
    await message.delete()
    end_time = time.time()
    ping_time = round((end_time - start_time) * 1000, 1)
    user = message.from_user
    username = f"[{user.first_name} {user.last_name}](https://t.me/{user.username})"
    await app.send_photo(
        chat_id=message.chat.id,
        photo="https://user-images.githubusercontent.com/149149385/278584536-1dab252e-9fd4-4a0c-a80e-5e16c1220eaa.jpg",
        caption=f"**‚ú®Telery**\n"
                f"__üîßVersion: 1.8.1 Lite__\n"
                f"Source: @telery_userbot2\n"
                f"**Lite-versionüíö**\n"
                f"**Ping: {ping_time}ms**\n"
                f"User: {username}"
    )


# –ö–æ–º–∞–Ω–¥–∞ "caz"
@app.on_message(filters.command(["caz"], prefixes=prefix_userbot))
async def caz_command(_, message):
    user_id = message.from_user.id
    current_time = time.time()
    if user_id in last_command_time and current_time - last_command_time[user_id] < 1:
        await message.reply_text("**‚úã–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ!**")
        return
    await asyncio.sleep(4)
    bet_split = message.text.split(f"{prefix_userbot}caz ", 1)
    if len(bet_split) < 2:
        await message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞!")
        return
    bet = bet_split[1]
    try:
        bet_amount, bet_text = bet.split(maxsplit=1)
        bet_amount = int(bet_amount)
        if bet_amount <= 0:
            await message.reply_text("**–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!**")
            return
    except (ValueError, IndexError):
        await message.reply_text("**–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞!**")
        return
    result = random.choice([0, 1])
    if result == 0:
        loss_amount = bet_amount
        await message.reply_text(f"**üò¢–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {loss_amount} {bet_text}**")
    else:
        win_amount = bet_amount * 2
        await message.reply_text(f"**ü•≥–í—ã–∏–≥—Ä—ã—à! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} {bet_text}**")
    last_command_time[user_id] = current_time


# –ö–æ–º–∞–Ω–¥–∞ "animtext"
@app.on_message(filters.command("animtext", prefixes=prefix_userbot) & filters.me)
async def animtext_command(_, message):
    input_text = message.text.split("animtext ", maxsplit=1)[1]
    temp_text = input_text
    edited_text = ""
    typing_symbol = "‚ñà"
    while edited_text != input_text:
        try:
            await message.edit(edited_text + typing_symbol)
            time.sleep(0.1)
            edited_text = edited_text + temp_text[0]
            temp_text = temp_text[1:]
            await message.edit(edited_text)
            time.sleep(0.1)
        except FloodWait:
            print("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")


# –ö–æ–º–∞–Ω–¥–∞ "who"
@app.on_message(filters.command("who", prefixes=prefix_userbot))
def who_command(client, message):
    prefix = prefix_userbot
    user_id = message.from_user.id
    current_time = time.time()
    if user_id in last_command_time and current_time - last_command_time[user_id] < 1:
        response = "**‚úã–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ!**"
        time.sleep(1)
        app.delete_messages(chat_id, message_id)
    else:
        args = message.text.split()[1:]
        if args:
            members_count = client.get_chat_members_count(message.chat.id)
            members = client.get_chat_members(message.chat.id, limit=members_count)
            random_user = random.choice(list(members)).user
            response = f"@{random_user.username} {' '.join(args)}"
        else:
            response = f"‚ùå–ù–µ–≤–µ—Ä–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ. –ü—Ä–∏–º–µ—Ä:\n`{prefix}who –º–∏–ª—ã–π`"
        last_command_time[user_id] = current_time
    app.send_message(message.chat.id, response)


# –ö–æ–º–∞–Ω–¥–∞ "rk/randkomaru"
@app.on_message(filters.command(["randkomaru", "rk"], prefixes=prefix_userbot))
async def send_random_komaru_gif(_, message):
    url = 'https://raw.githubusercontent.com/Blaing-7542/BD_Telery/main/komarugifbd'
    response = requests.get(url)
    if response.status_code == 200:
        gifs = response.text.split('\n')
        random_gif = random.choice(gifs)
        await message.reply_animation(random_gif)
    else:
        await message.reply('**üò¢–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–∏—Ñ–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.**')
        last_command_time[user_id] = current_time


# –ö–æ–º–∞–Ω–¥–∞ "oorr"
@app.on_message(filters.command(["oorr"], prefixes=prefix_userbot))
def oorr_command(_, message):
    random_number = random.randint(0, 1)
    if random_number == 0:
        coin_emoji = "üåë"
        result = "ü¶Ö–í—ã–ø–∞–ª –æ—Ä—ë–ª!"
    else:
        coin_emoji = "üåë"
        result = "ü™ô–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞!"
    message.reply_text(coin_emoji)
    time.sleep(2)
    message.reply_text(result)


# –ö–æ–º–∞–Ω–¥–∞ "ping"
@app.on_message(filters.me & filters.command(["ping"], prefixes=prefix_userbot))
def ping(_, message):
    start_time = time.time()
    msg = message.edit("üåï")
    end_time = time.time()
    ping_time = round((end_time - start_time) * 1000)
    msg.edit("**üïõ–í–∞—à –ø–∏–Ω–≥: {} –º—Å**".format(ping_time))


# –ö–æ–º–∞–Ω–¥–∞ "time"
@app.on_message(filters.command(["time"], prefixes=prefix_userbot))
def send_time(_, message):
    user_id = message.from_user.id
    current_time = datetime.now().strftime("%H:%M:%S")
    if user_id in last_command_time and time.time() - last_command_time[user_id] < 1:
        message.reply_text("–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ!")
    else:
        message.reply_text(f"**‚åõ–í—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_time}**")
        last_command_time[user_id] = time.time()


# –ö–æ–º–∞–Ω–¥–∞ "math"
@app.on_message(filters.command(["math"], prefixes=prefix_userbot))
def calculate_math(_, message):
    command = message.text.split(" ", 1)[1]
    forbidden_chars = (
        "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",
        "w",
        "x", "y", "z", "–∞", "–±", "–≤", "–≥", "–¥", "–µ", "—ë", "–∂", "–∑", "–∏", "–π", "–∫", "–ª", "–º", "–Ω", "–æ", "–ø", "—Ä", "—Å",
        "—Ç",
        "—É", "—Ñ", "—Ö", "—Ü", "—á", "—à", "—â", "—ä", "—ã", "—å", "—ç", "—é", "—è", "!", "@", "#", "$", "%", "^", "&", "(", ")",
        "_",
        "=", "{", "}", "[", "]", ";", "'", "<", ">", ",", ".", "?", "<", ">", "¬´", "**")
    if any(char in command for char in forbidden_chars):
        message.reply("‚õî–¢–∞–∫–∏–µ —Å–ª–æ–≤–∞ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
    else:
        try:
            result = eval(command)
            message.reply(f"{command} = {result}")
        except Exception as e:
            message.reply(f"‚õî–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ "search"
@app.on_message(filters.command(["search"], prefixes=prefix_userbot))
def search_command(_, message):
    query = message.text.split(' ', 1)[1]
    page_py = wiki_wiki.page(query)
    if page_py.exists():
        response = "**üß†–ù–∞—à—ë–ª –æ—Ç–≤–µ—Ç:**\n\n" + page_py.text[:1024]
        message.edit_text(response)
    else:
        message.edit_text("‚ùå–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏.")


# –ö–æ–º–∞–Ω–¥–∞ "spam"
@app.on_message(filters.me & filters.command(["spam"], prefixes=prefix_userbot))
def spam_message(_, message):
    prefix = prefix_userbot
    _, count, *words = message.text.split()
    count = int(count)
    text = ' '.join(words)
    message.delete()
    for _ in range(count):
        app.send_message(message.chat.id, text)


# –ö–æ–º–∞–Ω–¥–∞ "off"
@app.on_message(filters.me & filters.command(["off"], prefixes=prefix_userbot))
def turn_off(_, message):
    message.edit("**üí§–û—Ç–∫–ª—é—á–∞—é —é–∑–µ—Ä–±–æ—Ç–∞...**")
    exit()


# –ö–æ–º–∞–Ω–¥–∞ "prefix"
@app.on_message(filters.me & filters.command("prefix", prefixes="."))
def change_prefix_command(command, message):
    if len(message.command) > 1:
        new_prefix = message.command[1]
        change_prefix(new_prefix)
        message.edit_text("–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π *off*, —á—Ç–æ–±—ã –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–∏–ª—Å—è.")
    elif command.startswith(".prefix"):
        with open("userbot.info", "r") as file:
            prefix = file.readlines()[3].strip()
        message.edit_text(f"**–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å:\n{prefix}**")


def is_allowed(user_id):
    with open("userbot.info", "r") as file:
        first_line = file.readline()
        return str(user_id) in first_line


def change_prefix(new_prefix):
    with open("userbot.info", "r+") as file:
        lines = file.readlines()
        lines[3] = new_prefix + "\n"
        file.seek(0)
        file.writelines(lines)
        file.truncate()


# –ö–æ–º–∞–Ω–¥–∞ "afk"
@app.on_message(filters.me & filters.command("afk", prefixes=prefix_userbot))
def set_afk_mode(_, message):
    global afk_mode, afk_reason, afk_start_time
    afk_mode = True
    afk_reason = " ".join(message.command[1:])
    afk_start_time = datetime.now()
    message.edit_text("**üò¥AFK-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω!**")


@app.on_message(filters.mentioned)
def check_afk(_, message):
    if afk_mode:
        current_time = datetime.now()
        time_diff = current_time - afk_start_time
        message.reply_text(f"**üí§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤ AFK. \n–í—Ä–µ–º—è - {time_diff} \n–ü—Ä–∏—á–∏–Ω–∞ - {afk_reason}**")


# –ö–æ–º–∞–Ω–¥–∞ "afkoff"
@app.on_message(filters.me & filters.command("afkoff", prefixes=prefix_userbot))
def unset_afk_mode(_, message):
    global afk_mode
    afk_mode = False
    message.edit_text("**ü•±AFK-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω!**")


# –ö–æ–º–∞–Ω–¥–∞ "swap"
@app.on_message(filters.command("swap", prefixes=prefix_userbot))
def swap(_, message):
    original_text = message.reply_to_message.text
    swapped_text = swap_layout(original_text)
    message.reply_text(swapped_text)

eng_to_rus = str.maketrans(
    "qwertyuiop[]asdfghjkl;'zxcvbnm,.`",
    "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é—ë"
)
rus_to_eng = str.maketrans(
    "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é—ë",
    "qwertyuiop[]asdfghjkl;'zxcvbnm,.`"
)


def swap_layout(text):
    words = text.split()
    swapped_words = []
    for word in words:
        if word.isupper():
            swapped_word = word.lower().translate(rus_to_eng if '–∞' <= word.lower()[0] <= '—è' or word.lower()[0] == '—ë' else eng_to_rus)
            swapped_words.append(swapped_word.upper())
        else:
            swapped_words.append(word.translate(rus_to_eng if '–∞' <= word.lower()[0] <= '—è' or word.lower()[0] == '—ë' else eng_to_rus))
    return ' '.join(swapped_words)


# –ö–æ–º–∞–Ω–¥–∞ "block"
@app.on_message(filters.private & filters.me & filters.command("block", prefixes=prefix_userbot))
def block_user(client, message):
    user_id = message.chat.id
    user_name = message.chat.username
    message.edit(f"**{user_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.**")
    client.block_user(user_id)


print("–Æ–∑–µ—Ä–±–æ—Ç Telery –∑–∞–ø—É—â–µ–Ω!\n–í–µ—Ä—Å–∏—è: 1.8.1\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞:\nhttps://t.me/TelerySupportBot")
app.run()
